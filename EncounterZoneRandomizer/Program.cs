using Mutagen.Bethesda;
using Mutagen.Bethesda.Synthesis;
using Mutagen.Bethesda.Skyrim;

namespace EncounterZoneRandomizer
{
    public class Program
    {
        public static Lazy<Settings> _settings = null!;
        public static Settings settings => _settings.Value;
        public static async Task<int> Main(string[] args)
        {
            return await SynthesisPipeline.Instance
                .AddPatch<ISkyrimMod, ISkyrimModGetter>(RunPatch)
                .SetAutogeneratedSettings(
                    nickname: "Settings",
                    path: "settings.json",
                    out _settings)
                .SetTypicalOpen(GameRelease.SkyrimSE, "EncounterZoneRandomizer.esp")
                .Run(args);
        }

        private static IPatcherState<ISkyrimMod, ISkyrimModGetter>? _state;
        public static IPatcherState<ISkyrimMod, ISkyrimModGetter> State {
            get {
                if(_state == null) {
                    throw new NullReferenceException();
                }
                return _state;
            }
        }

        public static void RunPatch(IPatcherState<ISkyrimMod, ISkyrimModGetter> state)
        {
            //Your code here!
            Program._state = state;
            EZConfig.Init();
            EZManager.PatchAll();
        }
    }
}
